rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isProjectOwner(resource) {
      return isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }
    
    function isProjectCollaborator(resource) {
      return isAuthenticated() && request.auth.uid in resource.data.collaborators;
    }
    
    function isProjectMember(resource) {
      return isProjectOwner(resource) || isProjectCollaborator(resource);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Read: allow if authenticated (application layer enforces access control)
      allow read: if isAuthenticated();

      // Create: authenticated users can create projects (they become owner)
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;

      // Update:
      // - Owners: full updates
      // - Collaborators: can only update canvas-related fields (not name/slug/owner/collaborators/deletedAt)
      allow update: if isAuthenticated() && (
        // Owner can update anything
        resource.data.ownerId == request.auth.uid ||
        // Collaborators limited to canvas content/state fields
        (
          request.auth.uid in resource.data.collaborators &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly([
            'pages', 'canvasBackground', 'currentPageId', 'objectNames', 'pageMetadata',
            'thumbnailUrl', 'updatedAt', 'lastAccessedAt'
          ])
        )
      );

      // Delete: only owner can delete
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      
      // Shapes subcollection - critical for real-time collaboration
      match /shapes/{shapeId} {
        // Read: allow if user has access to parent project
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid ||
          request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.collaborators
        );
        
        // Write: allow if user has access to parent project
        allow write: if isAuthenticated() && (
          get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid ||
          request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.collaborators
        );
      }
    }
    
    // Collaboration requests collection
    match /collaborationRequests/{requestId} {
      // Read: sender or recipient can read
      allow read: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid ||
        resource.data.toUserEmail == request.auth.token.email
      );
      
      // Create: authenticated users can send requests
      allow create: if isAuthenticated() &&
        request.resource.data.fromUserId == request.auth.uid;
      
      // Update: only recipient can update (accept/deny)
      allow update: if isAuthenticated() && (
        resource.data.toUserId == request.auth.uid ||
        resource.data.toUserEmail == request.auth.token.email
      );
      
      // Delete: sender or recipient can delete
      allow delete: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid
      );
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Read/Write: only the user who owns the notification
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Transfer invitations collection
    match /invitations_transfer/{inviteId} {
      // Ownership transfer disabled
      allow read, create, update, delete: if false;
    }
    
    // Canvas dimensions collection
    match /canvasDimensions/{docId} {
      // Any authenticated user can read/write canvas dimensions
      allow read, write: if isAuthenticated();
    }
    
    // Shapes collection (for individual shape docs - mostly unused but needed for compatibility)
    match /shapes/{shapeId} {
      // Any authenticated user can read/write shapes (shapes are mainly stored in projects now)
      allow read, write: if isAuthenticated();
    }
  }
}
